// generated by Fast Light User Interface Designer (fluid) version 1.0105

#include "gui.h"
#ifdef WIN32
#include <windows.h>
#endif
Fl_Font PL_Font;

static void timeout_callback(void *o) {
  Widok *w = (Widok*)o;
Ekosystem *e = w->Podaj_Ekosystem();

if(!e)
   return;
e->generacja();
w->redraw();
  Fl::repeat_timeout(0.3, timeout_callback, o);
}

inline void UserInterface::cb_Nowy_i(Fl_Menu_*, void*) {
  int sz, wys;

const char *p;

do
 sz = (p = fl_input("Szerokosc Ekosystemu:", "50"))?atoi(p):0;
while (sz <= 3 || sz > 400);

do
 wys = (p = fl_input("Wysokosc Ekosystemu:", "50"))?atoi(p):0;
while (wys <= 3 || wys > 400);

Ekosystem *e = Widok1->Podaj_Ekosystem();
Widok1->Pokazuj_Ekosystem(0);
if (e)
 delete e;

Widok1->Pokazuj_Ekosystem(new Ekosystem(sz, wys));
Uaktualnij_Liste_Wyboru();
Widok1->redraw();
}
void UserInterface::cb_Nowy(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Nowy_i(o,v);
}

inline void UserInterface::cb_Zapisz_i(Fl_Menu_*, void*) {
  const Ekosystem *e = Widok1->Podaj_Ekosystem();
if (!e)
 return;

Fl_File_Chooser fc(KATALOG_EKOSYSTEMOW,
   "Pliki z ekosystemem (*.eko)",
   Fl_File_Chooser::CREATE,
   "Wybierz plik do zapisu ekosystemu");
fc.show();

while (fc.visible())
 Fl::wait();

if (fc.count() == 1) {
  FILE *Plik = fopen(fc.value(), "wb");
  e->Zapisz(Plik);
  fclose(Plik);
};
}
void UserInterface::cb_Zapisz(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Zapisz_i(o,v);
}

inline void UserInterface::cb_Wczytaj_i(Fl_Menu_*, void*) {
  Fl_File_Chooser fc(KATALOG_EKOSYSTEMOW,
   "Pliki z ekosystemem (*.eko)",
   Fl_File_Chooser::SINGLE,
   "Wybierz plik ekosystemu");
fc.show();

while (fc.visible())
 Fl::wait();

if (fc.count() == 1) {

 Ekosystem *e = Widok1->Podaj_Ekosystem();
 Widok1->Pokazuj_Ekosystem(0);
 if (e)
  delete e;
 e = new Ekosystem(50, 50);
 Widok1->Pokazuj_Ekosystem(e);

 FILE *Plik = fopen(fc.value(), "rb");
 e->Wczytaj(Plik);
 fclose(Plik);
Uaktualnij_Liste_Wyboru();
 Widok1->przywroc();
 Widok1->redraw();
};
}
void UserInterface::cb_Wczytaj(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Wczytaj_i(o,v);
}

inline void UserInterface::cb_zamknij_i(Fl_Menu_*, void*) {
  Ekosystem *e = Widok1->Podaj_Ekosystem();
Widok1->Pokazuj_Ekosystem(0);
if (e)
  delete e;
Widok1->redraw();
}
void UserInterface::cb_zamknij(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_zamknij_i(o,v);
}

inline void UserInterface::cb_Koniec_i(Fl_Menu_*, void*) {
  exit(0);
}
void UserInterface::cb_Koniec(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Koniec_i(o,v);
}

inline void UserInterface::cb_Usmierc_i(Fl_Menu_*, void*) {
  Ekosystem *e = Widok1->Podaj_Ekosystem();
if (!e)
   return;

e->Usmierc_Komorki();
Widok1->redraw();
}
void UserInterface::cb_Usmierc(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Usmierc_i(o,v);
}

inline void UserInterface::cb_Przeszukaj_i(Fl_Menu_*, void*) {
  Uaktualnij_Menu_Ukladow();
}
void UserInterface::cb_Przeszukaj(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Przeszukaj_i(o,v);
}

inline void UserInterface::cb_Zapisz1_i(Fl_Menu_*, void*) {
  Ekosystem *e;
if (!(e = Widok1->Podaj_Ekosystem())) 
 return;

Fl_File_Chooser fc(KATALOG_UKLADOW,
   "Uklady komórek (*.lif)", 
   Fl_File_Chooser::CREATE,
   "Wybierz plik do zapisu ukladu");

fc.show();

while (fc.visible())
Fl::wait();

if (fc.count() != 1)
 return;

FILE *Plik = fopen(fc.value(), "wb");
e->Zapisz_LIF(Plik,
 e->podaj_tablice()->podaj_szerokosc() / 2,
 e->podaj_tablice()->podaj_wysokosc() / 2);
fclose(Plik);
}
void UserInterface::cb_Zapisz1(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Zapisz1_i(o,v);
}

inline void UserInterface::cb_Powstawanie_i(Fl_Menu_*, void*) {
  Ekosystem *e = Widok1->Podaj_Ekosystem();
if(!e)
return;
e->opcje.losowe_komorki(! (e->opcje.losowe_komorki()));
}
void UserInterface::cb_Powstawanie(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Powstawanie_i(o,v);
}

inline void UserInterface::cb_menuitem_Stany_i(Fl_Menu_*, void*) {
  Wybierz_Widok_Stany();;
}
void UserInterface::cb_menuitem_Stany(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_menuitem_Stany_i(o,v);
}

inline void UserInterface::cb_menuitem_Rodzaje_i(Fl_Menu_*, void*) {
  Wybierz_Widok_Rodzaje();
}
void UserInterface::cb_menuitem_Rodzaje(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_menuitem_Rodzaje_i(o,v);
}

inline void UserInterface::cb_menuitem_Warunki_i(Fl_Menu_*, void*) {
  Wybierz_Widok_Warunki();
}
void UserInterface::cb_menuitem_Warunki(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_menuitem_Warunki_i(o,v);
}

inline void UserInterface::cb_Powieksz_i(Fl_Menu_*, void*) {
  Widok1->powieksz();
Widok1->redraw();
}
void UserInterface::cb_Powieksz(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Powieksz_i(o,v);
}

inline void UserInterface::cb_Pomniejsz_i(Fl_Menu_*, void*) {
  Widok1->pomniejsz();
Widok1->redraw();
}
void UserInterface::cb_Pomniejsz(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Pomniejsz_i(o,v);
}

inline void UserInterface::cb_Przywr_i(Fl_Menu_*, void*) {
  Widok1->przywroc();
Widok1->redraw();
}
void UserInterface::cb_Przywr(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Przywr_i(o,v);
}

inline void UserInterface::cb_O_i(Fl_Menu_*, void*) {
  about->show();
}
void UserInterface::cb_O(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_O_i(o,v);
}

Fl_Menu_Item UserInterface::menu_menu_glowne[] = {
 {"Plik", 0,  0, 0, 64, 0, 0, 14, 56},
 {"Nowy ekosystem", 0,  (Fl_Callback*)UserInterface::cb_Nowy, 0, 0, 0, 0, 14, 56},
 {"Zapisz ekosystem", 0,  (Fl_Callback*)UserInterface::cb_Zapisz, 0, 0, 0, 0, 14, 56},
 {"Wczytaj ekosystem", 0,  (Fl_Callback*)UserInterface::cb_Wczytaj, 0, 0, 0, 0, 14, 56},
 {"Zamknij ekosystem", 0,  (Fl_Callback*)UserInterface::cb_zamknij, 0, 128, 0, 0, 14, 56},
 {"Koniec", 0xff1b,  (Fl_Callback*)UserInterface::cb_Koniec, 0, 0, 0, 0, 14, 56},
 {0,0,0,0,0,0,0,0,0},
 {"Uklady kom\363rek", 0,  0, 0, 64, 0, 0, 14, 56},
 {"Usmierc wszystkie kom\363rki", 0,  (Fl_Callback*)UserInterface::cb_Usmierc, 0, 0, 0, 0, 14, 56},
 {"Przeszukaj katalog ponownie", 0,  (Fl_Callback*)UserInterface::cb_Przeszukaj, 0, 128, 0, 0, 14, 56},
 {"Katalog Uklad\363w", 0,  0, 0, 64, 0, 0, 14, 56},
 {0,0,0,0,0,0,0,0,0},
 {"Zapisz uklad kom\363rek", 0,  (Fl_Callback*)UserInterface::cb_Zapisz1, 0, 0, 0, 0, 14, 56},
 {0,0,0,0,0,0,0,0,0},
 {"Opcje", 0,  0, 0, 64, 0, 0, 14, 56},
 {"Powstawanie losowych rodzaj\363w", 0,  (Fl_Callback*)UserInterface::cb_Powstawanie, 0, 2, 0, 0, 14, 56},
 {0,0,0,0,0,0,0,0,0},
 {"Widok", 0,  0, 0, 64, 0, 0, 14, 56},
 {"Stany Komorek", 0,  (Fl_Callback*)UserInterface::cb_menuitem_Stany, 0, 12, 0, 0, 14, 56},
 {"Rodzaje Komorek", 0,  (Fl_Callback*)UserInterface::cb_menuitem_Rodzaje, 0, 8, 0, 0, 14, 56},
 {"Warunki Srodowiska", 0,  (Fl_Callback*)UserInterface::cb_menuitem_Warunki, 0, 136, 0, 0, 14, 56},
 {"Powieksz", 0,  (Fl_Callback*)UserInterface::cb_Powieksz, 0, 0, 0, 0, 14, 56},
 {"Pomniejsz", 0,  (Fl_Callback*)UserInterface::cb_Pomniejsz, 0, 0, 0, 0, 14, 56},
 {"Przywr\363""c", 0,  (Fl_Callback*)UserInterface::cb_Przywr, 0, 0, 0, 0, 14, 56},
 {0,0,0,0,0,0,0,0,0},
 {"Pomoc", 0,  0, 0, 64, 0, 0, 14, 56},
 {"O programie", 0,  (Fl_Callback*)UserInterface::cb_O, 0, 0, 0, 0, 14, 56},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* UserInterface::zamknij = UserInterface::menu_menu_glowne + 4;
Fl_Menu_Item* UserInterface::menu_ukladow = UserInterface::menu_menu_glowne + 10;
Fl_Menu_Item* UserInterface::menuitem_Stany = UserInterface::menu_menu_glowne + 18;
Fl_Menu_Item* UserInterface::menuitem_Rodzaje = UserInterface::menu_menu_glowne + 19;
Fl_Menu_Item* UserInterface::menuitem_Warunki = UserInterface::menu_menu_glowne + 20;

inline void UserInterface::cb__i(Fl_Button*, void*) {
  Widok1->przesun_w_lewo();
Widok1->redraw();
}
void UserInterface::cb_(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb__i(o,v);
}

inline void UserInterface::cb_1_i(Fl_Button*, void*) {
  Widok1->przesun_w_prawo();
Widok1->redraw();
}
void UserInterface::cb_1(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_1_i(o,v);
}

inline void UserInterface::cb_2_i(Fl_Button*, void*) {
  Widok1->powieksz();
Widok1->redraw();
}
void UserInterface::cb_2(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_2_i(o,v);
}

inline void UserInterface::cb_line_i(Fl_Button*, void*) {
  Widok1->pomniejsz();
Widok1->redraw();
}
void UserInterface::cb_line(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_line_i(o,v);
}

inline void UserInterface::cb_8_i(Fl_Button*, void*) {
  Widok1->przesun_w_gore();
Widok1->redraw();
}
void UserInterface::cb_8(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_8_i(o,v);
}

inline void UserInterface::cb_21_i(Fl_Button*, void*) {
  Widok1->przesun_w_dol();
Widok1->redraw();
}
void UserInterface::cb_21(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_21_i(o,v);
}

inline void UserInterface::cb_panel_Stany_i(Fl_Round_Button*, void*) {
  Wybierz_Widok_Stany();
}
void UserInterface::cb_panel_Stany(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_panel_Stany_i(o,v);
}

inline void UserInterface::cb_panel_Rodzaje_i(Fl_Round_Button*, void*) {
  Wybierz_Widok_Rodzaje();
}
void UserInterface::cb_panel_Rodzaje(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_panel_Rodzaje_i(o,v);
}

inline void UserInterface::cb_panel_Warunki_i(Fl_Round_Button*, void*) {
  Wybierz_Widok_Warunki();
}
void UserInterface::cb_panel_Warunki(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_panel_Warunki_i(o,v);
}

inline void UserInterface::cb_9square_i(Fl_Button*, void*) {
  Widok1->Ustaw_Promien_Modyfikacji(0);
}
void UserInterface::cb_9square(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_9square_i(o,v);
}

inline void UserInterface::cb_1square_i(Fl_Button*, void*) {
  Widok1->Ustaw_Promien_Modyfikacji(1);
}
void UserInterface::cb_1square(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_1square_i(o,v);
}

inline void UserInterface::cb_9square1_i(Fl_Button*, void*) {
  Widok1->Ustaw_Promien_Modyfikacji(2);
}
void UserInterface::cb_9square1(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_9square1_i(o,v);
}

inline void UserInterface::cb_11_i(Fl_Button*, void*) {
  Ekosystem *e = Widok1->Podaj_Ekosystem();

if(!e)
   return;
e->generacja();
Widok1->redraw();
}
void UserInterface::cb_11(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_11_i(o,v);
}

inline void UserInterface::cb_5_i(Fl_Button*, void*) {
  Ekosystem *e = Widok1->Podaj_Ekosystem();

if(!e)
   return;

for (int n = 0; n < 5; n++)
   e->generacja();

Widok1->redraw();
}
void UserInterface::cb_5(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_5_i(o,v);
}

inline void UserInterface::cb_10_i(Fl_Button*, void*) {
  Ekosystem *e = Widok1->Podaj_Ekosystem();

if(!e)
   return;

for (int n = 0; n < 10; n++)
   e->generacja();

Widok1->redraw();
}
void UserInterface::cb_10(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_10_i(o,v);
}

inline void UserInterface::cb_Stany_i(Fl_Button*, void*) {
  lista_stanow->clear();

for (int n = 0; n < Opisy_Stanow.size(); n++) {
   if (! Opisy_Stanow[n].nazwa().empty())
      lista_stanow->add(Opisy_Stanow[n].nazwa().c_str(), (void*)n);
}

edycja_stanow_grp->deactivate();
okienko_stanow->show();

for (int n = 0; n < okno1->children(); n++)
   okno1->child(n)->deactivate();
}
void UserInterface::cb_Stany(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Stany_i(o,v);
}

inline void UserInterface::cb_Rodzaje_i(Fl_Button*, void*) {
  lista_rodzajow->clear();

Wektor_Int typy = Fabryka_Komorek::Podaj_Typy();

for (int n = 0; n < typy.size(); n++) {
   lista_rodzajow->add(Fabryka_Komorek::Podaj_Komorke(typy[n])->nazwa().c_str(),
    (void*)typy[n]);
}

edycja_rodzaju_grp->deactivate();
okienko_rodzajow->show();
}
void UserInterface::cb_Rodzaje(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Rodzaje_i(o,v);
}

inline void UserInterface::cb_Warunki_i(Fl_Button*, void*) {
  Wektor_String nazwy = Fabryka_Warunkow_Srodowiska::Podaj_Nazwy();
lista_warunkow->clear();

for (int n = 0; n < nazwy.size(); n++) {
   lista_warunkow->add(nazwy[n].c_str(), 0);
}

edycja_warunkow_grp->deactivate();
okienko_warunkow->show();

for (int n = 0; n < okno1->children(); n++)
   okno1->child(n)->deactivate();
}
void UserInterface::cb_Warunki(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Warunki_i(o,v);
}

inline void UserInterface::cb_play_i(Fl_Button* o, void*) {
  if (!playing) {
   Fl::add_timeout(0.2, timeout_callback, Widok1);
   o->label("@+9||");
} else {
   Fl::remove_timeout(timeout_callback);
   o->label("@+9>");
}

playing = !playing;
}
void UserInterface::cb_play(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_play_i(o,v);
}

inline void UserInterface::cb_lista_warunkow_i(Fl_Browser* o, void*) {
  if (!o->value()) {
   edycja_warunkow_grp->deactivate();
   return;
}

const Warunki_Srodowiska *W =
   Fabryka_Warunkow_Srodowiska::Nowe_Warunki(o->text(o->value()));

nazwa_warunkow->value(W->nazwa.c_str());
w_input->value(W->wilgotnosc());
o_input->value(W->oswietlenie());
t_input->value(W->temperatura());
kolor_warunkow->color(W->kolor());
kolor_warunkow->redraw();



edycja_warunkow_grp->activate();
}
void UserInterface::cb_lista_warunkow(Fl_Browser* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_lista_warunkow_i(o,v);
}

inline void UserInterface::cb_w_input_i(Fl_Value_Input*, void*) {
  Fabryka_Warunkow_Srodowiska::Zmien_Parametry
   (nazwa_warunkow->value(),
     w_input->value(),
     o_input->value(),
     t_input->value(), kolor_warunkow->color());
}
void UserInterface::cb_w_input(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_w_input_i(o,v);
}

inline void UserInterface::cb_o_input_i(Fl_Value_Input*, void*) {
  Fabryka_Warunkow_Srodowiska::Zmien_Parametry
   (nazwa_warunkow->value(),
     w_input->value(),
     o_input->value(),
     t_input->value(), kolor_warunkow->color());
}
void UserInterface::cb_o_input(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_o_input_i(o,v);
}

inline void UserInterface::cb_t_input_i(Fl_Value_Input*, void*) {
  Fabryka_Warunkow_Srodowiska::Zmien_Parametry
   (nazwa_warunkow->value(),
     w_input->value(),
     o_input->value(),
     t_input->value(), kolor_warunkow->color());
}
void UserInterface::cb_t_input(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_t_input_i(o,v);
}

inline void UserInterface::cb_kolor_warunkow_i(Fl_Button* o, void*) {
  unsigned char R, G, B;

Fl::get_color(o->color(), R, G, B);

fl_color_chooser("Wybierz kolor:", R, G, B);

o->color(fl_rgb_color(R, G, B));

Fabryka_Warunkow_Srodowiska::Zmien_Parametry
   (nazwa_warunkow->value(),
     w_input->value(),
     o_input->value(),
     t_input->value(), kolor_warunkow->color());
}
void UserInterface::cb_kolor_warunkow(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_kolor_warunkow_i(o,v);
}

inline void UserInterface::cb_OK_i(Fl_Button*, void*) {
  okienko_warunkow->hide();

for (int n = 0; n < okno1->children(); n++)
   okno1->child(n)->activate();

Uaktualnij_Liste_Wyboru();
}
void UserInterface::cb_OK(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_OK_i(o,v);
}

inline void UserInterface::cb_Dodaj_i(Fl_Button*, void*) {
  const char *p = fl_input("Podaj nazwe nowych warunkow srodowiska");

if (!p || !strlen(p))
   return;

Fabryka_Warunkow_Srodowiska::Nowe_Warunki(p);

lista_warunkow->add(p);
}
void UserInterface::cb_Dodaj(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Dodaj_i(o,v);
}

inline void UserInterface::cb_Usun_i(Fl_Button*, void*) {
  int n;


if (! (n= lista_warunkow->value()))
   return;

Fabryka_Warunkow_Srodowiska::Usun_Warunki
   (nazwa_warunkow->value());

lista_warunkow->remove(n);

edycja_warunkow_grp->deactivate();
}
void UserInterface::cb_Usun(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Usun_i(o,v);
}

inline void UserInterface::cb_lista_stanow_i(Fl_Browser* o, void*) {
  int sel = o->value();

if (!sel) {
   edycja_stanow_grp->deactivate();
   return;
}


int nr = (int)(o->data(sel));
numer_stanu->value(nr);

nazwa_stanu->value(Opisy_Stanow[nr].nazwa().c_str());
kolor_stanu->color(Opisy_Stanow[nr].kolor());
kolor_stanu->redraw();


edycja_stanow_grp->activate();
}
void UserInterface::cb_lista_stanow(Fl_Browser* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_lista_stanow_i(o,v);
}

inline void UserInterface::cb_nazwa_stanu_i(Fl_Input*, void*) {
  int n;
if ((n = lista_stanow->value())) {
  n = (int)(lista_stanow->data(n));
  Opisy_Stanow[n].nazwa(nazwa_stanu->value());

  lista_stanow->text(lista_stanow->value(), nazwa_stanu->value());
};
}
void UserInterface::cb_nazwa_stanu(Fl_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_nazwa_stanu_i(o,v);
}

inline void UserInterface::cb_kolor_stanu_i(Fl_Button* o, void*) {
  unsigned char R, G, B;

Fl::get_color(o->color(), R, G, B);

fl_color_chooser("Wybierz kolor:", R, G, B);

o->color(fl_rgb_color(R, G, B));

Opisy_Stanow[int(lista_stanow->data(lista_stanow->value()))].kolor(kolor_stanu->color());
}
void UserInterface::cb_kolor_stanu(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_kolor_stanu_i(o,v);
}

inline void UserInterface::cb_Dodaj1_i(Fl_Button*, void*) {
  const char *p;

do
 p = fl_input("Podaj numer stanu:");
while (p && strspn(p, "-0123456789") != strlen(p));

if (!p || !strlen(p))
   return;

int nr = atoi(p);
if (nr >= Opisy_Stanow.size())
   Opisy_Stanow.resize(nr + 1, Opis_Stanu(std::string(), FL_WHITE));



Opisy_Stanow[nr].nazwa(p);
Opisy_Stanow[nr].kolor(FL_WHITE);

lista_stanow->add(p, (void*)nr);
}
void UserInterface::cb_Dodaj1(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Dodaj1_i(o,v);
}

inline void UserInterface::cb_Usun1_i(Fl_Button*, void*) {
  int n;

if (! (n= lista_stanow->value()))
   return;
lista_stanow->remove(n);
lista_stanow->redraw();


n--;

Opisy_Stanow.erase(Opisy_Stanow.begin() + n);

edycja_stanow_grp->deactivate();
}
void UserInterface::cb_Usun1(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Usun1_i(o,v);
}

inline void UserInterface::cb_OK1_i(Fl_Button*, void*) {
  okienko_stanow->hide();

for (int n = 0; n < okno1->children(); n++)
   okno1->child(n)->activate();

Uaktualnij_Liste_Wyboru();
}
void UserInterface::cb_OK1(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_OK1_i(o,v);
}

inline void UserInterface::cb_nazwa_rodzaju_i(Fl_Input* o, void*) {
  int n;
if (o->active() && (n = lista_rodzajow->value())) {
  n = (int)(lista_rodzajow->data(n));

  Fabryka_Komorek::Zmien_Parametry(n, o->value());

  lista_rodzajow->text(lista_rodzajow->value(), o->value());
};
}
void UserInterface::cb_nazwa_rodzaju(Fl_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_nazwa_rodzaju_i(o,v);
}

inline void UserInterface::cb_3_i(Fl_Button*, void*) {
  Fl_File_Chooser fc(KATALOG_WTYCZEK,
#ifdef LINUX
   "Biblioteki dynamiczne (*.so)",
#else
#ifdef WIN32
   "Biblioteki dynamiczne (*.dll)",
#endif
#endif
   Fl_File_Chooser::SINGLE,
   "Wybierz wtyczke z funkcja przejscia");

fc.show();

while (fc.visible())
Fl::wait();

if (fc.count() == 1) {
   modul_rodzaju->value(fc.value());
   modul_rodzaju->do_callback();
};
}
void UserInterface::cb_3(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_3_i(o,v);
}

inline void UserInterface::cb_modul_rodzaju_i(Fl_File_Input* o, void*) {
  int n;
if (o->active() && (n = lista_rodzajow->value())) {
  n = (int)(lista_rodzajow->data(n));

  Komorka::funkcja_przejscia f;
  f = Fabryka_Funkcji::Zaladuj_Funkcje(o->value());
  if(!f) {
     fl_message("Je¶li nie przypiszesz poprawnie modu³u, to bêd± problemy.");
     return;
  }

  Fabryka_Komorek::Zmien_Parametry(n, o->value(), f);
};
}
void UserInterface::cb_modul_rodzaju(Fl_File_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_modul_rodzaju_i(o,v);
}

inline void UserInterface::cb_kolor_rodzaju_i(Fl_Button* o, void*) {
  unsigned char R, G, B;

Fl::get_color(o->color(), R, G, B);

fl_color_chooser("Wybierz kolor:", R, G, B);

o->color(fl_rgb_color(R, G, B));


int n;
if (o->active() && (n = lista_rodzajow->value())) {
  n = (int)(lista_rodzajow->data(n));

  Fabryka_Komorek::Zmien_Parametry(n, o->color());
};
}
void UserInterface::cb_kolor_rodzaju(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_kolor_rodzaju_i(o,v);
}

inline void UserInterface::cb_lista_rodzajow_i(Fl_Browser* o, void*) {
  int sel = o->value();

if (!sel) {
   edycja_rodzaju_grp->deactivate();
   return;
}


int nr = (int)(o->data(sel));
numer_rodzaju->value(nr);

const Komorka *k = Fabryka_Komorek::Podaj_Komorke(nr);

nazwa_rodzaju->value(k->nazwa().c_str());
modul_rodzaju->value(k->modul().c_str());
kolor_rodzaju->color(k->kolor());
kolor_rodzaju->redraw();


edycja_rodzaju_grp->activate();
modul_rodzaju->set_visible_focus();
}
void UserInterface::cb_lista_rodzajow(Fl_Browser* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_lista_rodzajow_i(o,v);
}

inline void UserInterface::cb_Dodaj2_i(Fl_Button*, void*) {
  const char *p;

while(true){
 p = fl_input("Podaj numer nowego typu:");
 if(!p || !strlen(p))
    return;
 if (strspn(p, "-0123456789") == strlen(p))
    break;
}


int nr = atoi(p);

Fabryka_Komorek::Nowy_Rodzaj_Komorki(nr, 0);
Fabryka_Komorek::Zmien_Parametry(nr, "bez nazwy");

lista_rodzajow->add(p, (void*)nr);
lista_rodzajow->value(lista_rodzajow->size());
lista_rodzajow->do_callback();
}
void UserInterface::cb_Dodaj2(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Dodaj2_i(o,v);
}

inline void UserInterface::cb_OK2_i(Fl_Button*, void*) {
  if (Fabryka_Komorek::Podaj_Typy().size() == 1) {
 if (fl_choice("Masz tylko jeden rodzaj komórek.\n"
   "Wype³niæ nimi ca³y ekosystem?", "Nie", "Tak", 0) == 1) {
  Ekosystem *e = Widok1->Podaj_Ekosystem();
  if (e) {
    int n = Fabryka_Komorek::Podaj_Typy()[0];
    e->Wypelnij_Caly(Fabryka_Komorek::Podaj_Komorke(n));
    Widok1->redraw();
  }
 }
}

okienko_rodzajow->hide();
Uaktualnij_Liste_Wyboru();
}
void UserInterface::cb_OK2(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_OK2_i(o,v);
}

#include <FL/Fl_Image.H>
static unsigned char idata_life[] =
"\275\275\304\275\275\304\275\275\304\275\275\275\275\304\304\275\275\275\216\
\275\304\275\275\304\275\275\275\275\275\275\275\275\275\275\304\275\216\275\
\304\275\275\304\275\275\304\275\275\275\275\304\304\275\275\275\275\275\365\
\376\365\365\376\376\365\365\376\365\376\365\365\376\365\376\365\216\357\376\
\365\365\365\376\376\376\365\376\376\376\365\376\365\376\365\216\357\376\365\
\365\376\376\365\365\376\365\376\365\365\376\365\376\365\275\275\365\376\376\
\376\376\376\376\376\376\376\376\376\376\376\376\376\365\225\365\376\376\376\
\376\311\203K&K\203\311\376\376\376\376\365\216\365\376\376\376\376\376\376\
\376\376\376\376\376\376\376\376\376\365\275\275\365\376\376\376\376\376\376\
\376\376\376\376\376\376\376\376\376\365\225\365\376\376\365""f\0\0\0\0\0\0\0""\
f\365\376\376\365\225\365\376\376\376\376\376\376\376\376\376\376\376\376\376\
\376\376\365\275\304\365\376\376\376\376\376\376\376\376\376\376\376\376\376\
\376\376\365\225\365\376\365@\0\0\0\0\0\0\0\0\0@\365\376\365\230\365\376\376\
\376\376\376\376\376\376\376\376\376\376\376\376\376\365\304\275\376\376\376\
\376\376\376\376\376\376\376\376\376\376\376\376\376\365\225\365\376""f\0\0\0\
\0\0\0\0\0\0\0\0""f\376\365\225\365\376\376\376\376\376\376\376\376\376\376\
\376\376\376\376\376\376\275\275\365\376\376\376\376\376\376\376\376\376\376\
\376\376\376\376\376\365\225\376\311\0\0\0\0\0\0\0\0\0\0\0\0\0\311\376\225\
\365\376\376\376\376\376\376\376\376\376\376\376\376\376\376\376\376\275\275\
\376\376\376\376\376\376\376\376\376\376\376\376\376\376\376\376\365\225\376\
\203\0\0\0\0\0\0\0\0\0\0\0\0\0\203\376\225\365\376\376\376\376\376\376\376\
\376\376\376\376\376\376\376\376\365\275\275\365\376\376\376\376\376\376\376\
\376\376\376\376\376\376\376\376\365\230\365K\0\0\0\0\0\0\0\0\0\0\0\0\0T\365\
\225\365\376\376\376\376\376\376\376\376\376\376\376\376\376\376\376\376\275\
\304\365\376\376\376\376\376\376\376\376\376\376\376\376\376\376\376\365\230\
\357(\0\0\0\0\0\0\0\0\0\0\0\0\0(\365\230\365\376\376\376\376\376\376\376\376\
\376\376\376\376\376\376\376\376\275\304\365\376\376\376\376\376\376\376\376\
\376\376\376\376\376\376\376\365\225\376K\0\0\0\0\0\0\0\0\0\0\0\0\0K\365\230\
\365\376\376\376\376\376\376\376\376\376\376\376\376\376\376\376\365\275\275\
\376\376\376\376\376\376\376\376\376\376\376\376\376\376\376\376\365\216\376\
\216\0\0\0\0\0\0\0\0\0\0\0\0\0\203\376\216\365\376\376\376\376\376\376\376\
\376\376\376\376\376\376\376\376\376\275\275\365\376\376\376\376\376\376\376\
\376\376\376\376\376\376\376\376\365\225\376\311\0\0\0\0\0\0\0\0\0\0\0\0\0\
\311\376\225\365\376\376\376\376\376\376\376\376\376\376\376\376\376\376\376\
\376\275\275\376\376\376\376\376\376\376\376\376\376\376\376\376\376\376\376\
\365\225\365\376""f\0\0\0\0\0\0\0\0\0\0\0""f\376\365\230\365\376\376\376\376\
\376\376\376\376\376\376\376\376\376\376\376\365\275\304\365\376\376\376\376\
\376\376\376\376\376\376\376\376\376\376\376\365\230\365\376\365K\0\0\0\0\0\0\
\0\0\0@\365\376\365\225\365\376\376\376\376\376\376\376\376\376\376\376\376\
\376\376\376\376\304\275\365\376\376\376\376\376\376\376\376\376\376\376\376\
\376\376\376\365\225\365\376\376\365""f\0\0\0\0\0\0\0""f\365\376\376\365\230\
\365\376\376\376\376\376\376\376\376\376\376\376\376\376\376\376\365\275\304\
\365\376\376\376\376\376\376\376\376\376\376\376\376\376\376\376\365\230\365\
\376\376\376\376\311\203K(K\203\311\376\376\376\376\365\230\365\376\376\376\
\376\376\376\376\376\376\376\376\376\376\376\376\365\275\275\365\365\365\365\
\365\365\365\365\365\365\365\365\365\365\365\365\365\216\357\376\365\365\365\
\376\376\365\365\376\376\376\365\365\365\365\365\216\357\365\365\365\365\365\
\365\365\365\365\365\365\365\365\365\365\365\275\216\216\230\225\230\225\230\
\225\230\225\230\230\230\225\230\225\225\216T\216\230\230\225\230\225\216\230\
\230\225\225\225\225\230\225\230\216T\216\230\230\225\225\225\225\225\230\230\
\216\225\230\230\225\230\216\216\275\365\376\365\365\365\365\365\365\365\365\
\365\365\365\365\365\365\365\216\365\365\365\365\365\365\365\365\365\365\365\
\365\365\365\365\365\365\216\365\365\365\365\365\376\376\365\365\376\376\376\
\365\365\365\365\365\275\275\365\376\376\376\376\376\376\376\376\376\376\376\
\376\376\376\376\365\230\365\376\376\376\376\376\376\376\376\376\376\376\376\
\376\376\376\365\230\365\376\376\376\376\311\216K&K\203\311\376\376\376\376\
\376\275\275\365\376\376\376\376\376\376\376\376\376\376\376\376\376\376\376\
\365\230\365\376\376\376\376\376\376\376\376\376\376\376\376\376\376\376\365\
\225\365\376\376\365""f\0\0\0\0\0\0\0""f\365\376\376\376\275\304\365\376\376\
\376\376\376\376\376\376\376\376\376\376\376\376\376\365\230\365\376\376\376\
\376\376\376\376\376\376\376\376\376\376\376\376\365\225\365\376\365@\0\0\0\0\
\0\0\0\0\0@\365\376\365\275\275\376\376\376\376\376\376\376\376\376\376\376\
\376\376\376\376\376\365\230\365\376\376\376\376\376\376\376\376\376\376\376\
\376\376\376\376\365\225\365\376""f\0\0\0\0\0\0\0\0\0\0\0""f\376\365\275\275\
\365\376\376\376\376\376\376\376\376\376\376\376\376\376\376\376\365\230\365\
\376\376\376\376\376\376\376\376\376\376\376\376\376\376\376\365\225\376\311\
\0\0\0\0\0\0\0\0\0\0\0\0\0\311\376\275\275\376\376\376\376\376\376\376\376\
\376\376\376\376\376\376\376\376\365\230\365\376\376\376\376\376\376\376\376\
\376\376\376\376\376\376\376\365\216\376\203\0\0\0\0\0\0\0\0\0\0\0\0\0\203\
\376\275\304\365\376\376\376\376\376\376\376\376\376\376\376\376\376\376\376\
\365\225\365\376\376\376\376\376\376\376\376\376\376\376\376\376\376\376\365\
\230\365K\0\0\0\0\0\0\0\0\0\0\0\0\0K\376\275\275\365\376\376\376\376\376\376\
\376\376\376\376\376\376\376\376\376\365\230\365\376\376\376\376\376\376\376\
\376\376\376\376\376\376\376\376\365\230\365(\0\0\0\0\0\0\0\0\0\0\0\0\0&\365\
\275\304\365\376\376\376\376\376\376\376\376\376\376\376\376\376\376\376\365\
\230\365\376\376\376\376\376\376\376\376\376\376\376\376\376\376\376\365\225\
\376K\0\0\0\0\0\0\0\0\0\0\0\0\0K\376\275\275\376\376\376\376\376\376\376\376\
\376\376\376\376\376\376\376\376\365\230\365\376\376\376\376\376\376\376\376\
\376\376\376\376\376\376\376\365\216\376\203\0\0\0\0\0\0\0\0\0\0\0\0\0\203\
\376\275\275\365\376\376\376\376\376\376\376\376\376\376\376\376\376\376\376\
\365\230\365\376\376\376\376\376\376\376\376\376\376\376\376\376\376\376\365\
\225\376\311\0\0\0\0\0\0\0\0\0\0\0\0\0\311\376\275\275\376\376\376\376\376\
\376\376\376\376\376\376\376\376\376\376\376\365\230\365\376\376\376\376\376\
\376\376\376\376\376\376\376\376\376\376\365\225\365\376""f\0\0\0\0\0\0\0\0\0\
\0\0""f\376\365\275\275\365\376\376\376\376\376\376\376\376\376\376\376\376\
\376\376\376\365\230\365\376\376\376\376\376\376\376\376\376\376\376\376\376\
\376\376\365\225\365\376\365(\0\0\0\0\0\0\0\0\0@\365\376\365\275\304\365\376\
\376\376\376\376\376\376\376\376\376\376\376\376\376\376\365\225\365\376\376\
\376\376\376\376\376\376\376\376\376\376\376\376\376\365\230\365\376\376\376""\
f\0\0\0\0\0\0\0""f\365\376\376\376\275\275\376\376\376\376\376\376\376\376\
\376\376\376\376\376\376\376\376\365\230\365\376\376\376\376\376\376\376\376\
\376\376\376\376\376\376\376\365\230\365\376\376\376\376\311\203K&T\216\311\
\376\376\376\376\365\304\275\365\365\365\365\365\365\365\365\365\365\365\365\
\365\365\365\365\365\216\357\365\365\365\365\365\365\365\365\365\365\365\365\
\365\365\365\365\216\365\365\365\365\365\376\376\365\365\365\376\376\365\365\
\365\365\365\275\216\216\230\230\230\225\225\216\225\225\230\216\225\225\230\
\225\230\216T\216\230\225\230\225\225\216\230\230\225\216\225\225\230\225\230\
\216T\216\230\230\225\230\216\216\225\230\225\216\216\230\225\230\225\216\216\
\275\365\365\365\365\365\376\376\365\365\376\376\376\365\365\365\365\365\216\
\365\365\365\365\365\376\376\365\365\376\376\376\365\365\365\365\365\216\365\
\365\365\365\365\376\376\376\357\365\376\376\365\365\365\365\365\275\275\365\
\376\376\376\376\311\203K(K\203\311\376\376\376\376\365\230\365\376\376\376\
\376\311\203K(K\203\311\376\376\376\376\365\230\365\376\376\376\376\311\203K(K\
\203\311\376\376\376\376\365\275\275\365\376\376\365""f\0\0\0\0\0\0\0""f\365\
\376\376\365\230\365\376\376\365""f\0\0\0\0\0\0\0""f\365\376\376\365\225\365\
\376\376\365""f\0\0\0\0\0\0\0""f\365\376\376\376\275\304\365\376\365K\0\0\0\0\
\0\0\0\0\0K\365\376\365\225\365\376\365@\0\0\0\0\0\0\0\0\0@\365\376\365\225\
\365\376\365@\0\0\0\0\0\0\0\0\0@\365\376\365\275\275\365\376""f\0\0\0\0\0\0\0\
\0\0\0\0""f\376\365\230\365\376""f\0\0\0\0\0\0\0\0\0\0\0""f\376\365\225\365\
\376""f\0\0\0\0\0\0\0\0\0\0\0""f\376\376\275\275\376\311\0\0\0\0\0\0\0\0\0\0\
\0\0\0\311\376\216\376\311\0\0\0\0\0\0\0\0\0\0\0\0\0\311\376\216\376\311\0\0\
\0\0\0\0\0\0\0\0\0\0\0\311\376\275\275\376\203\0\0\0\0\0\0\0\0\0\0\0\0\0\203\
\376\216\376\203\0\0\0\0\0\0\0\0\0\0\0\0\0\203\376\216\376\203\0\0\0\0\0\0\0\
\0\0\0\0\0\0\203\376\275\275\376K\0\0\0\0\0\0\0\0\0\0\0\0\0K\376\225\365K\0\0\
\0\0\0\0\0\0\0\0\0\0\0K\376\225\376K\0\0\0\0\0\0\0\0\0\0\0\0\0K\376\275\275\
\365&\0\0\0\0\0\0\0\0\0\0\0\0\0&\365\230\365(\0\0\0\0\0\0\0\0\0\0\0\0\0&\365\
\230\357&\0\0\0\0\0\0\0\0\0\0\0\0\0&\365\304\275\376K\0\0\0\0\0\0\0\0\0\0\0\0\
\0K\365\225\376K\0\0\0\0\0\0\0\0\0\0\0\0\0K\365\225\376K\0\0\0\0\0\0\0\0\0\0\
\0\0\0K\365\275\275\376\203\0\0\0\0\0\0\0\0\0\0\0\0\0\203\376\216\376\203\0\0\
\0\0\0\0\0\0\0\0\0\0\0\203\376\216\376\203\0\0\0\0\0\0\0\0\0\0\0\0\0\203\376\
\275\275\376\311\0\0\0\0\0\0\0\0\0\0\0\0\0\311\376\216\376\311\0\0\0\0\0\0\0\
\0\0\0\0\0\0\311\376\216\376\311\0\0\0\0\0\0\0\0\0\0\0\0\0\311\376\275\275\
\365\376""f\0\0\0\0\0\0\0\0\0\0\0""f\376\365\230\365\376""f\0\0\0\0\0\0\0\0\0\
\0\0""f\376\365\230\365\376""f\0\0\0\0\0\0\0\0\0\0\0""f\376\365\275\275\376\
\376\365@\0\0\0\0\0\0\0\0\0K\365\376\365\225\365\376\365@\0\0\0\0\0\0\0\0\0@\
\365\376\365\225\365\376\365@\0\0\0\0\0\0\0\0\0K\365\376\365\275\275\365\376\
\376\365""f\0\0\0\0\0\0\0""f\365\376\376\365\225\365\376\376\365""f\0\0\0\0\0\
\0\0""f\365\376\376\365\225\365\376\376\365""f\0\0\0\0\0\0\0""f\365\376\376\
\365\304\304\365\376\376\376\376\311\203K&K\203\311\376\376\365\376\365\225\
\365\376\376\376\376\311\203K&K\203\311\376\376\376\376\365\230\365\376\376\
\376\376\311\203K&K\203\311\376\376\376\376\365\304\275\365\376\376\365\376\
\376\376\365\365\376\376\376\365\365\365\365\365\216\365\376\365\376\365\376\
\365\376\365\376\376\376\365\365\376\365\365\216\365\376\365\365\365\376\376\
\376\365\365\376\376\365\365\365\376\365\275\275\275\275\275\275\275\275\275\
\275\304\275\275\275\275\275\275\304\275\216\275\275\304\275\275\275\275\275\
\275\275\275\275\275\304\275\275\275\216\275\304\275\275\275\275\275\275\275\
\275\275\275\275\275\275\275\275\275";
static Fl_RGB_Image image_life(idata_life, 55, 55, 1, 0);

inline void UserInterface::cb_ok_i(Fl_Button*, void*) {
  about->hide();
okno1->show();
}
void UserInterface::cb_ok(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_ok_i(o,v);
}

UserInterface::UserInterface() {
  Fl_Double_Window* w;
  playing = false;
  { Fl_Double_Window* o = okno1 = new Fl_Double_Window(800, 600, "Projekt: Game Of Life Reactivated");
    w = o;
    o->user_data((void*)(this));
    { Fl_Menu_Bar* o = menu_glowne = new Fl_Menu_Bar(8, 5, 575, 25, "Wczytaj Uklad");
      o->menu(menu_menu_glowne);
    }
    { Fl_Group* o = new Fl_Group(17, 550, 503, 40);
      o->box(FL_THIN_DOWN_FRAME);
      { Fl_Button* o = new Fl_Button(181, 552, 80, 35, "@<-");
        o->shortcut(0x68);
        o->callback((Fl_Callback*)cb_);
      }
      { Fl_Button* o = new Fl_Button(263, 552, 80, 35, "@->");
        o->shortcut(0x6c);
        o->callback((Fl_Callback*)cb_1);
      }
      { Fl_Button* o = new Fl_Button(446, 552, 35, 35, "@+");
        o->shortcut(0x2b);
        o->callback((Fl_Callback*)cb_2);
      }
      { Fl_Button* o = new Fl_Button(482, 552, 35, 35, "@line");
        o->shortcut(0x2d);
        o->callback((Fl_Callback*)cb_line);
      }
      o->end();
    }
    { Fl_Group* o = new Fl_Group(530, 37, 40, 500);
      o->box(FL_THIN_DOWN_FRAME);
      { Fl_Button* o = new Fl_Button(532, 211, 35, 80, "@8->");
        o->shortcut(0x6b);
        o->callback((Fl_Callback*)cb_8);
      }
      { Fl_Button* o = new Fl_Button(532, 292, 35, 80, "@2->");
        o->shortcut(0x6a);
        o->callback((Fl_Callback*)cb_21);
      }
      o->end();
    }
    { Fl_Group* o = panel = new Fl_Group(592, 37, 198, 553, "Panel Sterowania");
      o->box(FL_THIN_DOWN_FRAME);
      o->labelfont(1);
      { Fl_Group* o = new Fl_Group(600, 72, 182, 88, "Widoki Ekosystemu:");
        o->box(FL_BORDER_BOX);
        { Fl_Round_Button* o = panel_Stany = new Fl_Round_Button(609, 77, 163, 25, "Stany Kom\363rek");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->value(1);
          o->callback((Fl_Callback*)cb_panel_Stany);
          o->labelfont(PL_Font);
        }
        { Fl_Round_Button* o = panel_Rodzaje = new Fl_Round_Button(609, 104, 163, 25, "Rodzaje Kom\363rek");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->callback((Fl_Callback*)cb_panel_Rodzaje);
          o->labelfont(PL_Font);
        }
        { Fl_Round_Button* o = panel_Warunki = new Fl_Round_Button(609, 130, 163, 25, "Warunski \246rodowiska");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->callback((Fl_Callback*)cb_panel_Warunki);
          o->labelfont(PL_Font);
        }
        o->end();
      }
      { Fl_Group* o = new Fl_Group(600, 191, 182, 119, "Modyfikacja P\363l");
        o->box(FL_BORDER_BOX);
        { Fl_Choice* o = lista_wyboru = new Fl_Choice(607, 208, 167, 22, "Aktualny element:");
          o->down_box(FL_BORDER_BOX);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        { Fl_Button* o = new Fl_Button(608, 255, 50, 50, "@-9square");
          o->callback((Fl_Callback*)cb_9square);
        }
        { Fl_Button* o = new Fl_Button(666, 255, 50, 50, "@+1square");
          o->callback((Fl_Callback*)cb_1square);
        }
        { Fl_Button* o = new Fl_Button(724, 255, 50, 50, "@+9square");
          o->callback((Fl_Callback*)cb_9square1);
        }
        { Fl_Box* o = new Fl_Box(607, 234, 169, 19, "Obszar modyfikacji:");
          o->align(FL_ALIGN_BOTTOM_LEFT|FL_ALIGN_INSIDE);
        }
        o->end();
      }
      { Fl_Group* o = new Fl_Group(599, 329, 182, 63, "Generacje kom\363rek:");
        o->box(FL_BORDER_BOX);
        { Fl_Button* o = new Fl_Button(606, 335, 50, 50, "1 @+9>|");
          o->shortcut(0x31);
          o->callback((Fl_Callback*)cb_11);
        }
        { Fl_Button* o = new Fl_Button(664, 335, 50, 50, "5 @+9>|");
          o->shortcut(0x35);
          o->callback((Fl_Callback*)cb_5);
        }
        { Fl_Button* o = new Fl_Button(722, 335, 50, 50, "10 @+9>|");
          o->shortcut(0x30);
          o->callback((Fl_Callback*)cb_10);
        }
        o->end();
      }
      { Fl_Group* o = new Fl_Group(600, 467, 182, 111, "Edycja:");
        o->box(FL_BORDER_BOX);
        { Fl_Button* o = new Fl_Button(609, 475, 164, 29, "Stany kom\363rek");
          o->callback((Fl_Callback*)cb_Stany);
          o->labelfont(PL_Font);
        }
        { Fl_Button* o = new Fl_Button(609, 508, 164, 29, "Rodzaje Kom\363rek");
          o->callback((Fl_Callback*)cb_Rodzaje);
          o->labelfont(PL_Font);
        }
        { Fl_Button* o = new Fl_Button(609, 541, 164, 29, "Warunki \246rodowiska");
          o->callback((Fl_Callback*)cb_Warunki);
          o->labelfont(PL_Font);
        }
        o->end();
      }
      { Fl_Button* o = play = new Fl_Button(722, 400, 52, 50, "@+9>");
        o->shortcut(0x70);
        o->labelcolor((Fl_Color)67);
        o->callback((Fl_Callback*)cb_play);
        o->when(FL_WHEN_RELEASE_ALWAYS);
      }
      o->resizable(0);
      o->end();
    }
    { Widok* o = Widok1 = new Widok(20, 37, 500, 500);
      o->box(FL_THIN_DOWN_BOX);
      o->color(FL_BLACK);
      o->selection_color((Fl_Color)208);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor((Fl_Color)176);
      o->user_data((void*)(lista_wyboru));
      o->align(FL_ALIGN_CENTER);
      o->when(FL_WHEN_RELEASE);
      Fl_Group::current()->resizable(o);
    }
    o->end();
  }
  { Fl_Double_Window* o = okienko_warunkow = new Fl_Double_Window(495, 275, "Warunki Srodowiska");
    w = o;
    o->user_data((void*)(this));
    { Fl_Group* o = new Fl_Group(6, 5, 485, 241);
      o->box(FL_THIN_DOWN_FRAME);
      { Fl_Browser* o = lista_warunkow = new Fl_Browser(12, 27, 181, 216, "Lista warunkow");
        o->type(1);
        o->callback((Fl_Callback*)cb_lista_warunkow);
        o->align(FL_ALIGN_TOP);
      }
      { Fl_Group* o = edycja_warunkow_grp = new Fl_Group(197, 15, 291, 228);
        o->box(FL_THIN_DOWN_FRAME);
        o->deactivate();
        { Fl_Output* o = nazwa_warunkow = new Fl_Output(219, 40, 246, 27, "Nazwa:");
          o->color((Fl_Color)51);
          o->labelfont(1);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        { Fl_Value_Input* o = w_input = new Fl_Value_Input(337, 93, 63, 25, "Wilgotno\266\346:");
          o->minimum(-100);
          o->maximum(100);
          o->step(1);
          o->callback((Fl_Callback*)cb_w_input);
          o->when(FL_WHEN_RELEASE);
          o->labelfont(PL_Font);
        }
        { Fl_Value_Input* o = o_input = new Fl_Value_Input(337, 127, 63, 25, "O\266wietlenie:");
          o->minimum(-100);
          o->maximum(100);
          o->step(1);
          o->callback((Fl_Callback*)cb_o_input);
          o->when(FL_WHEN_RELEASE);
          o->labelfont(PL_Font);
        }
        { Fl_Value_Input* o = t_input = new Fl_Value_Input(337, 161, 63, 25, "Temperatura:");
          o->minimum(-100);
          o->maximum(100);
          o->step(1);
          o->callback((Fl_Callback*)cb_t_input);
          o->when(FL_WHEN_RELEASE);
          o->labelfont(PL_Font);
        }
        { Fl_Button* o = kolor_warunkow = new Fl_Button(337, 195, 63, 25, "Kolor:");
          o->box(FL_BORDER_BOX);
          o->callback((Fl_Callback*)cb_kolor_warunkow);
          o->align(FL_ALIGN_LEFT);
          o->labelfont(PL_Font);
        }
        o->end();
      }
      o->end();
    }
    { Fl_Button* o = new Fl_Button(402, 248, 88, 26, "OK");
      o->shortcut(0xff1b);
      o->callback((Fl_Callback*)cb_OK);
    }
    { Fl_Button* o = new Fl_Button(8, 248, 88, 26, "&Dodaj");
      o->shortcut(0x64);
      o->callback((Fl_Callback*)cb_Dodaj);
    }
    { Fl_Button* o = new Fl_Button(103, 248, 88, 26, "&Usun");
      o->shortcut(0x75);
      o->callback((Fl_Callback*)cb_Usun);
      o->hide();
    }
    o->end();
  }
  { Fl_Double_Window* o = okienko_stanow = new Fl_Double_Window(490, 270, "Stany kom\363rek");
    w = o;
    o->user_data((void*)(this));
    { Fl_Group* o = new Fl_Group(0, 5, 480, 235);
      o->box(FL_DOWN_FRAME);
      { Fl_Browser* o = lista_stanow = new Fl_Browser(6, 25, 179, 210, "Lista stan\363w");
        o->type(1);
        o->callback((Fl_Callback*)cb_lista_stanow);
        o->align(FL_ALIGN_TOP);
        int kolumny[] = {40, 0};
        o->column_widths(kolumny);
      }
      { Fl_Group* o = edycja_stanow_grp = new Fl_Group(188, 10, 287, 225);
        o->box(FL_DOWN_BOX);
        o->deactivate();
        { Fl_Value_Output* o = numer_stanu = new Fl_Value_Output(373, 31, 30, 27, "Edycja stanu numer:");
          o->labelfont(1);
          o->textfont(1);
        }
        { Fl_Input* o = nazwa_stanu = new Fl_Input(224, 100, 209, 27, "Nazwa stanu:");
          o->callback((Fl_Callback*)cb_nazwa_stanu);
          o->align(FL_ALIGN_TOP_LEFT);
          o->labelfont(PL_Font);
        }
        { Fl_Button* o = kolor_stanu = new Fl_Button(319, 169, 63, 25, "Kolor:");
          o->box(FL_BORDER_BOX);
          o->callback((Fl_Callback*)cb_kolor_stanu);
          o->align(FL_ALIGN_LEFT);
          o->labelfont(PL_Font);
        }
        o->end();
      }
      o->end();
    }
    { Fl_Button* o = new Fl_Button(3, 242, 81, 25, "Dodaj");
      o->callback((Fl_Callback*)cb_Dodaj1);
    }
    { Fl_Button* o = new Fl_Button(89, 242, 81, 25, "Usun");
      o->callback((Fl_Callback*)cb_Usun1);
    }
    { Fl_Button* o = new Fl_Button(418, 242, 60, 25, "OK");
      o->callback((Fl_Callback*)cb_OK1);
    }
    o->end();
  }
  { Fl_Double_Window* o = okienko_rodzajow = new Fl_Double_Window(490, 270, "Rodzaje kom\363rek");
    w = o;
    o->user_data((void*)(this));
    { Fl_Group* o = new Fl_Group(3, 3, 482, 236);
      o->box(FL_DOWN_BOX);
      { Fl_Group* o = edycja_rodzaju_grp = new Fl_Group(189, 6, 292, 231);
        o->box(FL_DOWN_BOX);
        o->deactivate();
        { Fl_Value_Output* o = numer_rodzaju = new Fl_Value_Output(400, 21, 30, 27, "Edycja rodzaju numer:");
          o->labelfont(1);
          o->textfont(1);
        }
        { Fl_Input* o = nazwa_rodzaju = new Fl_Input(224, 70, 228, 25, "Nazwa rodzaju:");
          o->callback((Fl_Callback*)cb_nazwa_rodzaju);
          o->align(FL_ALIGN_TOP_LEFT);
          o->labelfont(PL_Font);
        }
        { Fl_Button* o = new Fl_Button(429, 131, 26, 26, "...");
          o->callback((Fl_Callback*)cb_3);
        }
        { Fl_File_Input* o = modul_rodzaju = new Fl_File_Input(225, 121, 206, 36, "Modul z funkcja przejscia:");
          o->callback((Fl_Callback*)cb_modul_rodzaju);
          o->align(FL_ALIGN_TOP_LEFT);
          o->when(FL_WHEN_RELEASE_ALWAYS);
          o->labelfont(PL_Font);
        }
        { Fl_Button* o = kolor_rodzaju = new Fl_Button(329, 176, 63, 25, "Kolor:");
          o->box(FL_BORDER_BOX);
          o->callback((Fl_Callback*)cb_kolor_rodzaju);
          o->align(FL_ALIGN_LEFT);
          o->labelfont(PL_Font);
        }
        o->end();
      }
      { Fl_Browser* o = lista_rodzajow = new Fl_Browser(7, 21, 182, 216, "Lista rodzaj\363w");
        o->type(1);
        o->callback((Fl_Callback*)cb_lista_rodzajow);
        o->align(FL_ALIGN_TOP);
      }
      o->end();
    }
    { Fl_Button* o = new Fl_Button(6, 242, 81, 25, "Dodaj");
      o->callback((Fl_Callback*)cb_Dodaj2);
    }
    { Fl_Button* o = new Fl_Button(89, 242, 81, 25, "Usu\361");
      o->hide();
      o->deactivate();
    }
    { Fl_Button* o = new Fl_Button(403, 242, 81, 25, "OK");
      o->callback((Fl_Callback*)cb_OK2);
    }
    o->end();
  }
  { Fl_Double_Window* o = about = new Fl_Double_Window(546, 416, "O programie");
    w = o;
    o->user_data((void*)(this));
    { Fl_Box* o = new Fl_Box(25, 7, 57, 64);
      o->image(image_life);
    }
    { Fl_Box* o = new Fl_Box(84, 21, 377, 38, "Game Of Life - Reactivated");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(30);
    }
    { Fl_Box* o = new Fl_Box(459, 7, 57, 64);
      o->image(image_life);
    }
    { Fl_Box* o = new Fl_Box(106, 54, 311, 49, "Robert Nowotniak <robercik@@stud.ics.p.lodz.pl>\nMicha\263 Ostrowski  <mostro\
w@@stud.ics.p.lodz.pl>");
      o->labelfont(PL_Font);
    }
    { Fl_Output* o = new Fl_Output(16, 105, 514, 268);
      o->type(12);
      o->labelfont(PL_Font);
      o->textfont(PL_Font);
      o->value("Niniejszy program jest wolnym oprogramowaniem; mo¿esz go\n rozprowadzaæ dalej i/lub modyfikowaæ na warunkach Powszechnej\n Licencji Publicznej GNU, wydanej przez Fundacjê Wolnego\n Oprogramowania - wed³ug wersji 2 tej Licencji lub (wed³ug twojego\n wyboru) której¶ z pó¼niejszych wersji.\n \n Niniejszy program rozpowszechniany jest z nadziej±, i¿ bêdzie on\n u¿yteczny - jednak BEZ JAKIEJKOLWIEK GWARANCJI, nawet domy¶lnej\n gwarancji PRZYDATNO¦CI HANDLOWEJ albo PRZYDATNO¦CI DO OKRE¦LONYCH\n ZASTOSOWAÑ. W celu uzyskania bli¿szych informacji siêgnij do\n Powszechnej Licencji Publicznej GNU.\n \n Z pewno¶ci± wraz z niniejszym programem otrzyma³e¶ te¿ egzemplarz\n Powszechnej Licencji Publicznej GNU (GNU General Public License);\n je¶li nie - napisz do Free Software Foundation, Inc., 59 Temple\n Place, Suite 330, Boston, MA  02111-1307  USA\n");
    }
    { Fl_Button* o = new Fl_Button(428, 379, 101, 29, "ok");
      o->callback((Fl_Callback*)cb_ok);
      o->labelfont(PL_Font);
    }
    o->end();
  }
  Uaktualnij_Liste_Wyboru();
  Uaktualnij_Menu_Ukladow();
  #ifdef WIN32
okno1->icon((char *)LoadIcon(fl_display, "A"));
#endif
okno1->show();
}

void UserInterface::Uaktualnij_Liste_Wyboru() {
  Wektor_String nazwy;
Wektor_Int typy;
const Komorka *k;


lista_wyboru->clear();

switch (Widok1->Podaj_Maske()) {

case Widok::Srodowisko:
nazwy = Fabryka_Warunkow_Srodowiska::Podaj_Nazwy();

for (int n = 0; n < nazwy.size(); n++) {
   lista_wyboru->add(nazwy[n].c_str(), 0, 0,
      (void*)Fabryka_Warunkow_Srodowiska::Nowe_Warunki(nazwy[n]));
}

break;

case Widok::Stany:

for (int n = 0; n < Opisy_Stanow.size(); n++) {
   if (! Opisy_Stanow[n].nazwa().empty())
      lista_wyboru->add(Opisy_Stanow[n].nazwa().c_str(), 0, 0,
         (void*)n);
}

break;

case Widok::Typy_Komorek:
typy = Fabryka_Komorek::Podaj_Typy();

for (int n = 0; n < typy.size(); n++) {
   k = Fabryka_Komorek::Podaj_Komorke(typy[n]);
   lista_wyboru->add(k->nazwa().c_str(), 0, 0,(void*)k);
}

break;

}
if (lista_wyboru->size() > 1)
   lista_wyboru->value(0);
lista_wyboru->redraw();
}

void UserInterface::Uaktualnij_Menu_Ukladow() {
  std::list<std::string> pliki;

#ifdef LINUX
DIR *Kat;
struct dirent *ent;
const char *nazwa;

if(!(Kat = opendir(KATALOG_UKLADOW))) {
   fl_message("Nie uda³o siê przeszukaæ katalogu \"%s\" z gotowymi wzorami", KATALOG_UKLADOW);
   return;
}

while ((ent = readdir(Kat))) {
 nazwa = ent->d_name;
 if (strlen(nazwa) <= 4)
      continue;
 if (strcasecmp(nazwa + strlen(nazwa) - 1 - 3, ".lif"))
  continue;
 pliki.push_back(nazwa);
}

closedir(Kat);
#else /* ! LINUX */
#ifdef WIN32

WIN32_FIND_DATA ent;
HANDLE hFind = INVALID_HANDLE_VALUE;

std::string PLIKI = std::string(KATALOG_UKLADOW).append("\\*.lif");

hFind = FindFirstFile(PLIKI.c_str(), &ent);
if (hFind == INVALID_HANDLE_VALUE){
 fl_message("Nie uda³o siê przeszukaæ katalogu \"%s\" z gotowymi wzorami", KATALOG_UKLADOW);
 return;
} 

do {
 if (strlen(ent.cFileName) <= 4)
      continue;
 if (strcasecmp(ent.cFileName + strlen(ent.cFileName) - 1 - 3, ".lif"))
  continue;
 pliki.push_back(ent.cFileName);
} while (FindNextFile(hFind, &ent));

FindClose(hFind);

#endif /* WIN32 */
#endif

// XXX tu trzeba dopisac wyczyszczenie submenu

for (std::list<std::string>::iterator i = pliki.begin();
     i != pliki.end();
     i++)
{
 menu_glowne->
add((std::string("Uklady komórek/Katalog Ukladów/") + *i).c_str(),
 0, (Fl_Callback*)cb_Wczytaj_Uklad_static, (void*)this);
}
}

void UserInterface::Wybierz_Widok_Warunki() {
  // XXX to menuitem_Warunki moze wskazywac w zle miejsce,
// jesli byly dynamicznie dodawane elementy do podmenu Ukladow..
  menuitem_Warunki->setonly();
panel_Warunki->setonly();

Widok1->Ustaw_Maske(Widok::Srodowisko);

Uaktualnij_Liste_Wyboru();
Widok1->redraw();
}

void UserInterface::Wybierz_Widok_Rodzaje() {
  menuitem_Rodzaje->setonly();
panel_Rodzaje->setonly();

Widok1->Ustaw_Maske(Widok::Typy_Komorek);

Uaktualnij_Liste_Wyboru();
Widok1->redraw();
}

void UserInterface::Wybierz_Widok_Stany() {
  menuitem_Stany->setonly();
panel_Stany->setonly();

Widok1->Ustaw_Maske(Widok::Stany);

Uaktualnij_Liste_Wyboru();
Widok1->redraw();
}

void UserInterface::cb_Wczytaj_Uklad_static(Fl_Widget *o, void *v) {
  // funkcja callback musi byc statyczna metoda, wiec nie ma w niej this,
// zatem trzeba robic to w ten sposob (zgodnie z FLTK FAQ)

Fl_Menu_Bar *menu = (Fl_Menu_Bar*)o;
const char *wybor = menu->text();

std::string nazwa_pliku = KATALOG_UKLADOW;
nazwa_pliku.append("/");
nazwa_pliku.append(wybor);

((UserInterface*)v)->Wczytaj_Uklad(nazwa_pliku.c_str());
}

void UserInterface::Wczytaj_Uklad(const char *nazwa) {
  if (! nazwa)
 return;

Ekosystem *e = Widok1->Podaj_Ekosystem();
if (!e)
   return;

FILE *f = fopen(nazwa, "r");
if (f) {
  e->Wczytaj_LIF(f,
 e->podaj_tablice()->podaj_szerokosc() / 2,
 e->podaj_tablice()->podaj_wysokosc() / 2,
1);
  fclose(f);
}
else
 fl_alert("Nie uda³o siê wczytaæ z pliku \"%s\".", nazwa);

Widok1->redraw();
}
